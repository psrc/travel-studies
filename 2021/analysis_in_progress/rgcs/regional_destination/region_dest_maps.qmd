---
title: "Regional destination data analysis: maps"
date: today
format: 
  html:
    mainfont: Poppins
    theme: [cosmo, custom.scss]
    toc: true
    df-print: kable
    warning: false
    echo: false
    code-tools: true
---

```{r}
#| include: FALSE

source("region_dest_data.R")

hex.lyr <- st_read("hex_grid/hex_grid_4mile_region.shp")
hex.lyr <- sf::st_transform(hex.lyr, 4326)

# remove water
hex.lyr <- st_filter(hex.lyr, bg2020.lyr, .pred = st_intersects)

# show empty hex map
# leaflet() %>% 
#   addProviderTiles(providers["CartoDB.Positron"][[1]]) %>%
#   addPolygons(data = hex.lyr, fillOpacity = 0.5,weight = 0.7,color = "#636363") 


# join trips to hex map
test <- st_join(sf_trip, hex.lyr, join = st_intersects)
st_geometry(test) <- NULL
test2 <- test %>% 
  group_by(GRID_ID) %>% 
  summarise(n_trip = n(), 
            n_trip_wt = sum(trip_weight_2017_2019, na.rm = TRUE)) %>% 
  ungroup()

hex_trip.lyr <- hex.lyr %>% 
  left_join(test2, by="GRID_ID") %>% 
  filter(n_trip_wt>1) %>%
  mutate(n_trip_wt_log10 = log10(n_trip_wt))
```

## hex map

- hexagon size: 4 sq. miles
- the weighted number of trips is calculated for each hexagon
- color ramp is adjusted using log scale:  log<sub>10</sub>\(number of trips\)

:::{.panel-tabset}

### number of trips in hexagons 

```{r}
#| out-height: 800px
#| out-width: 900px

# palettes
psrc_purple_plus<-c("#FFFFFF", "#FAE6FA","#D8BFD8", "#630460","#4a0048")
YlOrRd <- "YlOrRd"

build_hex_map_log <- function(layer, cus_pal, cus_bin){
  
  min_value_legend <- min(layer$n_trip_wt_log10)
  max_value_legend <- max(layer$n_trip_wt_log10)
  psrc_palette <- leaflet::colorNumeric(
    palette = cus_pal,
    domain = c(min_value_legend, max_value_legend)
    )
  
  label_n_trip <- paste0("number of trips: ", scales::number(layer$n_trip, accuracy = 1, big.mark = ","),
                         "<br>number of trips (weighted): ", scales::number(layer$n_trip_wt, accuracy = 1, big.mark = ",")) %>%
    lapply(htmltools::HTML)
  
  leaflet() %>%
    addProviderTiles(providers["CartoDB.Positron"][[1]]) %>%
    addPolygons(data = layer, fillOpacity = 0.65,weight = 0.1,color = "#636363",
                fillColor = ~psrc_palette(layer$n_trip_wt_log10),
                label=label_n_trip) %>%
    addPolygons(data = center.lyr, fill = FALSE, weight = 3.5, color = "#636363") %>%
    # addLegend(pal = psrc_palette, values = layer$n_trip_wt_log10,
    #           labFormat = labelFormat(transform = function(x) round(10^x, 0)),
    #           title="number of trips",position = "bottomright")
    addLegend_decreasing(pal = psrc_palette,
                       values = c(min_value_legend, max_value_legend),
                       position = "bottomright",
                       title="number of trips",
                       opacity = 0.7,
                       bins=cus_bin,
                       decreasing = TRUE,
                       # labFormat = labelFormat()) %>% #,
                       labFormat = labelFormat(
                         transform = function(x) round(10^x, 0)))
  
}

build_hex_map_log(hex_trip.lyr,psrc_purple_plus,5)
```

```{r}

fig <- plot_ly(x = ~hex_trip.lyr$n_trip_wt, type = "histogram",
               marker=list(color=psrc_colors$purples_inc[2])) %>%
  layout(xaxis = list(title = 'number of trips in a hexagon'), yaxis = list(title = 'hexagon counts'), 
         title = "histogram for number of trips in a hexagon",
         font = list(family="Poppins"))
fig
```



### only hexagons with more than 2000 trips: number of trips in hexagons

```{r}
#| out-height: 800px
#| out-width: 900px

hex_trip_top.lyr <- hex_trip.lyr %>% filter(n_trip_wt>2000)


build_hex_map_log(hex_trip_top.lyr,psrc_purple_plus,2)
```

```{r}

fig <- plot_ly(x = ~hex_trip_top.lyr$n_trip_wt, type = "histogram",
               marker=list(color=psrc_colors$purples_inc[2])) %>%
  layout(xaxis = list(title = 'number of trips in a hexagon'), yaxis = list(title = 'hexagon counts'), 
         title = "histogram for number of trips in a hexagon",
         font = list(family="Poppins"))
fig
```

```{r}
### number of trips in hexagons
# build_hex_map <- function(layer, num_quan){
#   
#   if(num_quan=="num"){
#     pal <- colorNumeric("YlOrRd", layer$n_trip_wt)
#   } 
#   else if(num_quan=="quan"){
#     pal <- colorQuantile("YlOrRd", layer$n_trip_wt, n = 5)
#   }
#   
#   
#   label_n_trip <- paste0("number of trips: ", scales::number(layer$n_trip, accuracy = 1, big.mark = ","),
#                          "<br>number of trips (weighted): ", scales::number(layer$n_trip_wt, accuracy = 1, big.mark = ",")) %>%
#     lapply(htmltools::HTML)
#   
#   leaflet() %>%
#     addProviderTiles(providers["CartoDB.Positron"][[1]]) %>%
#     addPolygons(data = layer, fillOpacity = 0.5,weight = 0.7,color = "#636363",
#                 fillColor = ~pal(layer$n_trip_wt),
#                 label=label_n_trip) %>%
#     addPolygons(data = center.lyr, fill = FALSE, color = "#636363") %>%
#     addLegend(pal = pal, values = layer$n_trip_wt,
#               title="number of trips",
#               position = "bottomright")
#   
# }
# build_hex_map(hex_trip.lyr,"num")


### number of trips by quintiles in hexagons
# build_hex_map(hex_trip.lyr,"quan")

### only hexagons with more than 2000 trips: number of trips by quintiles in hexagons
# build_hex_map(hex_trip_top.lyr,"quan")
```
:::

<!-- ## trip destinations map -->

<!-- - mark all trip destinations in the region  -->
<!-- - removing trips ended outside of the region and trips with `trip_weight_2017_2019 == 0` -->

```{r}
# test <- st_intersection(sf_trip, bg2020.lyr) %>% filter(trip_weight_2017_2019>0)
# 
# leaflet() %>%
#   addProviderTiles(providers["CartoDB.Positron"][[1]])%>%
#   addCircleMarkers(
#     data = test,
#     radius = 3,
#     weight = 0.1, color = "#636363",
#     fillColor = ~colorNumeric("YlOrRd", test$trip_weight_2017_2019)(test$trip_weight_2017_2019),
#     fillOpacity = 0.5,
#     label = paste0("trip weight: ", scales::number(test$trip_weight_2017_2019, accuracy = 1, big.mark = ",")) %>%
#       lapply(htmltools::HTML)
#   ) %>%
#   addPolygons(data = center.lyr, fill = FALSE, color = "#636363") %>%
#   addLegend(pal = colorNumeric("YlOrRd", test$trip_weight_2017_2019), values = test$trip_weight_2017_2019,
#             title="trip weights",
#             position = "bottomright")
```

