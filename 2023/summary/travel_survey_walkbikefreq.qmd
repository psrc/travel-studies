

---
title: "Travel Survey Summarization"
format: html
editor: visual
---

# New Package travelSurveyTools

PSRC and RSG have built a new package called travelSurveyTools to work with travel survey data. It is recommended to read through this documentation before you start using the package. <https://rsginc.github.io/travelSurveyTools/>

## Read in Libraries

```{r setup, include=FALSE}
library(data.table)
library(stringr)
library(travelSurveyTools)
library(psrcelmer)
library(dplyr)
library(psrcplot)
library(tidyverse)
source('survey-23-preprocess.R')
```

YOU MIGHT need to download some special packages on github: travelSurveyTools, psrcelmer, and psrcplot. IF you need to download them, here's how:

library(devtools)

devtools::install_github('rsgInc/travelSurveyTools') devtools::install_github('psrc/psrcelmer')

devtools::install_github('psrc/psrcplot')

## Read in Codebook

```{r , echo=FALSE}
cb_path = str_glue("J:/Projects/Surveys/HHTravel/Survey2023/Data/data_published/PSRC_Codebook_2023_v1.xlsx")

variable_list = readxl::read_xlsx(cb_path, sheet = 'variable_list')
value_labels = readxl::read_xlsx(cb_path, sheet = 'value_labels')

setDT(variable_list)
setDT(value_labels)
```

variable_list and value_labels will be used by the travelSurveyTools package whenever you summarize.

## Read in Data from Elmer

The 2017, 2019, 2021, and 2023 travel survey data is in Elmer. You will need to select exactly which columns you want to summarize. Note that the variables and values you pull in must match the codebook. (if for some reason in error, there is inconsistency we have to fix it).

The package uses DT and data.table for most operation, so you will usually want inputs to be in data.table format.


```{r }
hh<- get_query(sql= "select  household_id as hh_id, hhincome_broad,home_jurisdiction, home_county, hh_weight,vehicle_count, home_rgcname, home_lat, home_lng, survey_year, hh_race_category
                from HHSurvey.v_households_labels")


person<- get_query(sql= "select household_id as hh_id,race_category, walk_freq, bike_freq, transit_freq,
person_id, workplace, telecommute_freq, survey_year, person_weight, gender, age, sexuality, industry,office_available, commute_freq, education, work_lat, work_lng , work_rgcname, work_jurisdiction, work_county, share_1, share_2, share_3, share_4, share_5
                from HHSurvey.v_persons_labels")
                
day<- get_query(sql= "select person_id, day_id, household_id as hh_id, telework_time, day_weight , survey_year from HHSurvey.v_days_labels")

trip<- get_query(sql= "select trip_id, household_id as hh_id, day_id,
person_id, mode_1, dest_purpose, survey_year, trip_weight, distance_miles, mode_characterization, travelers_total 
                from HHSurvey.v_trips_labels")
setDT(hh)
setDT(person)
setDT(day)
setDT(trip)
```

## Set IDs as characters

We should fix this by writing a function. But for now set all ids to characters for easy joining.

```{r}

hh[, hh_id:=as.character(hh_id)]
person[, hh_id:=as.character(hh_id)]
day[, hh_id:=as.character(hh_id)]
trip[, hh_id := as.character(hh_id)]

person[, person_id := as.character(person_id)]
day[, person_id := as.character(person_id)]
trip[, person_id := as.character(person_id)]

day[, day_id := as.character(day_id)]
trip[, day_id := as.character(day_id)]

trip[, trip_id := as.character(trip_id)]
hh <- hh%>%mutate(survey_year=as.character(survey_year))
person <- person%>%mutate(survey_year=as.character(survey_year))
day <- day%>%mutate(survey_year=as.character(survey_year))
trip <- trip%>%mutate(survey_year=as.character(survey_year))
```

```         
```

Before you get started on any summary, please review the survey instrument for the question wording and options.

Carefully pay attention to which survey participants were asked which question. Often only a subset of the participants answered a question.

Furthermore, if you are going to summarize any data across time, you will need to RECONCILE any changes.

The survey instrument is here: J:/Projects/Surveys/HHTravel/Survey2023/Documents/Survey_Instrument/Puget_Sound_HTS_Questionnaire_2023_Final.docx

Open the codebook and review the variable and it's values. J:/Projects/Surveys/HHTravel/Survey2023/Data/data_published/PSRC_Codebook_2023_v1.xlsx

# Careful with multi-year summaries.

If you are doing a multi year summary, carefully look back at the questionnaire to note question changes. Here are the questionnaires for 2019:<file:///J:/Projects/Surveys/HHTravel/Survey2019/Planning/Survey%20Materials/PSRC_2019_Online_Questionnaire.html#employment_and_commute_questions> and 2021:J:/Projects/Surveys/HHTravel/Survey2021/Questionnaire/PSRC_2021_Questionnaire_032521.docx

Note that in the values table, we have groupings. These groupings can help you handle inconsistencies in the questions over time.

Also we generally have way too much detail in the responses to have statistically significant results, so most of the time you want to summarize grouped data. You can add the groupings to the variables table by using the function get_grouped_labels



```{r}
variable_list<-add_variable(variable_list, 'age_grp_2','person')
group_labels<-get_grouped_labels(group_id='group_3', group_name='age_grp_2')
value_labels<-add_values_code(group_name='age_grp_2')
person<-grp_to_tbl(tbl=person, ungrouped_name='age', grouped_name='age_grp_2')
```
```{r}
variable_list<-add_variable(variable_list, 'gender_grp','person')
group_labels<-get_grouped_labels(group_id='group_1', group_name='gender_grp')
value_labels<-add_values_code(group_name='gender_grp')
person<-grp_to_tbl(tbl=person, ungrouped_name='gender', grouped_name='gender_grp')
```

```{r}
variable_list<-add_variable(variable_list, 'bike_freq_grp','person')
group_labels<-get_grouped_labels(group_id='group_1', group_name='bike_freq_grp')
value_labels<-add_values_code(group_name='bike_freq_grp')
person<-grp_to_tbl(tbl=person, ungrouped_name='bike_freq', grouped_name='bike_freq_grp')
```

```{r}
#some how a duplicate snuck into the variable list not sure how
variable_list<-variable_list%>%distinct(variable, .keep_all=TRUE)
```

travelSurveyTools expects the data to be in a list of data.tables. You must also specify the names of the ids on each table, and the names of the weights.

```{r}
hh_2023<-hh%>%filter(survey_year=='2023')
person_2023=person%>%filter(survey_year=='2023')
day_2023=day%>%filter(survey_year=='2023')
trip_2023<-trip%>%filter(survey_year=='2023')

hts_data = list(hh=hh_2023,
                person=person_2023,
                day=day_2023,
                trip = trip_2023)
ids = c('hh_id', 'person_id','day_id', 'trip_id')
wts = c('hh_weight', 'person_weight', 'day_weight', 'trip_weight')
```

Now mode_simple is on the variables table, the values table, and the trip table. And we can run a summary.

```{r}

mode_summary = summarize_weighted(hts_data= hts_data,
                               summarize_var = 'share_2',
                               summarize_by = c( 'gender_grp'),
                               id_cols= ids,
                               wt_cols=wts,
                               wtname='person_weight'
                               )
```

```{r}

common_modes<-mode_summary$summary$wtd%>%mutate(share_2=if_else(is.na(share_2), 'Not Selected', share_2))%>%
  mutate(Bikes=if_else(share_2=='Selected', 'Bikes (outside for 15-minutes or more)', 'Does not Bike'))%>%
mutate(moe=prop_se*1.645)%>%filter(Bikes=='Bikes (outside for 15-minutes or more)')

static_column_chart(common_modes, x='Bikes', y='prop', fill='gender_grp',ylabel= 'Share', xlabel='Gender', moe='moe')+ theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),legend.text = element_text(size=14), axis.title.y=element_text(size=20), axis.title.x=element_text(size=20))
write.csv(common_modes, 'bike.csv')
```
