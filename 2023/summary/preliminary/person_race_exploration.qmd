```{r}

```

```{r}

```

---
title: "Race and Ethnicity Analysis"
format: html
editor: visual
---

# General setup 

PSRC and RSG have built a new package called travelSurveyTools to work with travel survey data. It is recommended to read through this documentation before you start using the package. <https://rsginc.github.io/travelSurveyTools/>

## Read in Libraries
```{r setup}
# YOU MIGHT need to download some special packages on github: travelSurveyTools, psrcelmer, and psrcplot. IF you need to download them, here's how:
# library(devtools)
# 
# devtools::install_github('rsgInc/travelSurveyTools') 
# devtools::install_github('psrc/psrcelmer')
# devtools::install_github('psrc/psrcplot')

library(data.table)
library(stringr)
library(travelSurveyTools)
library(psrcelmer)
library(dplyr)
library(psrcplot)
library(tidyverse)
library(table1)
# source('../survey-23-preprocess.R')
source('C:/Users/mrichards/Documents/GitHub/travel-studies/2023/summary/survey-23-preprocess.R')
```

## Read in Codebook
```{r , echo=FALSE}
cb_path = str_glue("J:/Projects/Surveys/HHTravel/Survey2023/Data/data_published/PSRC_Codebook_2023_v1.xlsx")

variable_list = readxl::read_xlsx(cb_path, sheet = 'variable_list')
value_labels = readxl::read_xlsx(cb_path, sheet = 'value_labels')

setDT(variable_list)
setDT(value_labels)
```


## Read in Data from Elmer
```{r }
# hh<- get_query(sql= "select  household_id as hh_id,
#                res_dur, prev_home_wa, vehicle_count, numadults, hhincome_detailed,
#                hhincome_broad,survey_year, prev_home_tract20,
#                prev_rent_own, rent_own, prev_res_type, res_type, hh_weight, hhsize
#                 from HHSurvey.v_households_labels")

person<- get_query(sql= "select household_id as hh_id, race_category,
                   race_afam, race_aiak, race_asian, race_hapi, race_noanswer, race_other, race_other_specify, race_white,
                   ethnicity_1, ethnicity_2, ethnicity_3, ethnicity_4, ethnicity_997, ethnicity_999, ethnicity_other,
                   person_id, survey_year, person_weight, gender, age
                   from HHSurvey.v_persons_labels")
                
# setDT(hh)
setDT(person)
```

## Set IDs as characters
```{r}

# hh[, hh_id:=as.character(hh_id)]
# person[, hh_id:=as.character(hh_id)]
person[, person_id := as.character(person_id)]

# hh <- hh%>%mutate(survey_year=as.character(survey_year))
person <- person%>%mutate(survey_year=as.character(survey_year))
```

```         
```

The survey instrument is here: J:/Projects/Surveys/HHTravel/Survey2023/Documents/Survey_Instrument/Puget_Sound_HTS_Questionnaire_2023_Final.docx

Open the codebook and review the variable and it's values. J:/Projects/Surveys/HHTravel/Survey2023/Data/data_published/PSRC_Codebook_2023_v1.xlsx

# Data setup
```{r}
# somehow a duplicate snuck into the variable list not sure how
variable_list<-variable_list%>%distinct(variable, .keep_all=TRUE)
```


```{r}
# nrow(person) #25364
# nrow(person$ethnicity_999) #prefer not to answer: NULL
# nrow(person$race_noanswer) #NULL

table(person$age)
adult <- person %>%
  filter(age%in% c('18-24 years', '25-34 years', '35-44 years', '45-54 years', '55-64 years', '65-74 years', '75-84 years', '85 years or older'))
# table(adult$age)
# nrow(adult) #21492
# length(unique(adult$person_id)) #21492 - just to check

# unique(adult$race_other_specify) #checking 'other' responses
# length(unique(adult$race_other_specify)) #99 people who selected 'other' 

adult_23 <- adult %>% 
  filter(survey_year=="2023") #5931 - to know how many respondents total
```

# Race and Ethnicity
## Race
```{r}
# pivot table so that each row is a different race column
adult_pivot_race <- adult_23 %>% 
  pivot_longer(cols = c(race_afam, race_aiak, race_asian, race_hapi, race_noanswer, race_other, race_white),
               names_to = "race_group",
               values_to = "select")
# unique(adult_pivot_race$race_other_specify)
table(adult_pivot_race$survey_year)

adult_pivot_race_select <- adult_pivot_race %>% 
  filter(select %in% 'Selected')

person_id_multiple <- adult_pivot_race_select %>% 
  group_by(person_id) %>% summarize(n=n()) %>% #count how many racial groups were selected per person
  right_join(adult_pivot_race_select, by = ("person_id")) #join to main table so number connected to races selected

nrow(person_id_multiple) #22056
table(person_id_multiple$n)

person_id_multiple_23_race <- person_id_multiple %>% 
  filter(survey_year=="2023") #5923
table(person_id_multiple_23_race$n)
```

```{r, include = FALSE}
## before making function (for checking) ----
# adult_1race <- person_id_multiple %>% 
#   filter(n %in% 1)
# adult_2race <- person_id_multiple %>%
#   filter(n %in% 2)
# adult_3race <- person_id_multiple %>%
#   filter(n %in% 3)
# adult_4race <- person_id_multiple %>% 
#   filter(n %in% 4)
# adult_5race <- person_id_multiple %>%
#   filter(n %in% 5)
# adult_6race <- person_id_multiple %>%
#   filter(n %in% 6)

# adult_2race_summary <- adult_2race %>%
#   pivot_wider(names_from = race_group, values_from = n, values_fill = 0) %>%
#   dplyr::select(race_asian:race_other) %>%
#   group_by(across(race_asian:race_other)) %>% count %>% arrange(desc(n)) %>%
#   mutate(total=sum(adult_2race_wide$n)) %>%
#   mutate(prop=(round(n/total, digits = 3)))

```

```{r}
# create simplified table for combining with ethnicity data (eventually)
adult_race <- person_id_multiple_23_race %>%
  dplyr::select(person_id, race_group, n)

## after making function ----
count_combination_race <- function(data, group, n_races){
  temp <- data %>% 
    filter(n %in% n_races)
  
  pivot <- temp %>% 
    pivot_wider(names_from = group, values_from = n, values_fill = 0) %>% 
    dplyr::select(any_of(c('race_afam', 'race_aiak', 'race_asian', 'race_hapi', 'race_noanswer', 'race_other', 'race_white'))) %>% 
    group_by(across(any_of(c('race_afam', 'race_aiak', 'race_asian', 'race_hapi', 'race_noanswer', 'race_other', 'race_white')))) %>% count %>% arrange(desc(n))
  
  output <- pivot %>% 
    mutate(total=sum(pivot$n)) %>% 
    mutate(prop=(round(n/total, digits = 3)))
}

adult_1race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 1) #5655 people
adult_2race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 2) #234 people 
adult_3race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 3) #32 people
adult_4race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 4) #2 people
adult_5race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 5) #0 people
adult_6race_summary <- count_combination_race(person_id_multiple_23_race, 'race_group', 6) #0 people
```

```{r, include=FALSE}
# testing numbers
race_afam <- person_id_multiple_23_race %>% 
  filter(n==1,
         race_group=="race_afam")
```


## Ethnicity
```{r}
# pivot table so that each row is a different ethnicity column
adult_pivot_ethnicity <- adult_23 %>% 
  pivot_longer(cols = c(ethnicity_1, ethnicity_2, ethnicity_3, ethnicity_4, ethnicity_997, ethnicity_999),
               names_to = "ethnicity_group",
               values_to = "select") #%>% 
  # mutate(eth_expand=case_when(ethnicity_group=="ethnicity_1"~"Not of Hispanic, Latino, or Spanish origin",
  #                             ethnicity_group=="ethnicity_2"~"Mexican, Mexican American, Chicano",
  #                             ethnicity_group=="ethnicity_3"~"Puerto Rican",
  #                             ethnicity_group=="ethnicity_4"~"Cuban",
  #                             ethnicity_group=="ethnicity_997"~"Another Hispanic, Latino, or Spanish origin",
  #                             ethnicity_group=="ethnicity_999"~"Prefer not to answer"))

# unique(adult$ethnicity_1)
table(adult$ethnicity_1, adult$ethnicity_2)
# unique(adult_pivot_ethnicity$ethnicity_other) #83
# unique(adult_pivot_ethnicity$survey_year) #83
# length(unique(adult_pivot_ethnicity$person_id)) #5931 - correct number of people
table(adult_pivot_ethnicity$select)

adult_pivot_ethnicity_select <- adult_pivot_ethnicity %>%
  filter(select %in% 'Selected')

length(unique(adult_pivot_ethnicity_select$person_id)) #5923 - 8 people missing


person_id_multiple <- adult_pivot_ethnicity_select %>% 
  group_by(person_id) %>% summarize(n=n()) %>% #count how many ethnicity groups were selected per person
  right_join(adult_pivot_ethnicity_select, by = ("person_id")) #join to main table so number connected to ethnicity selected

# length(unique(person_id_multiple$person_id)) #5923 - 8 people missing

nrow(person_id_multiple) #5945
table(person_id_multiple$n)

person_id_multiple_23_eth <- person_id_multiple %>% 
  filter(survey_year=="2023")
table(person_id_multiple_23_eth$n)

# unique(person_id_multiple_23_eth$ethnicity_other)
length(unique(person_id_multiple_23_eth$person_id)) #5923 - 8 people missing

# where are 8 missing people?
check_join <- adult_pivot_ethnicity %>% 
  anti_join(adult_pivot_ethnicity_select, by="person_id") 

length(unique(check_join$person_id))
missing_ids <- unique(check_join$person_id)

missing_people <- adult_23 %>% 
  filter(person_id %in% missing_ids)
# the missing 8 people didn't include races, but did answer the ethnicity question
```

```{r, include=FALSE}
## before making function (for checking) ----
# adult_2eth <- person_id_multiple_23 %>%
#   filter(n %in% 2)
# adult_3eth <- person_id_multiple_23 %>%
#   filter(n %in% 3)

# adult_3eth_summary <- adult_3eth %>%
#   pivot_wider(names_from = ethnicity_group, values_from = n, values_fill = 0) %>%
#   dplyr::select(any_of(c('ethnicity_1', 'ethnicity_2', 'ethnicity_3', 'ethnicity_4', 'ethnicity_997', 'ethnicity_999'))) %>%
#   group_by(across(any_of(c('ethnicity_1', 'ethnicity_2', 'ethnicity_3', 'ethnicity_4', 'ethnicity_997', 'ethnicity_999')))) %>% count %>% arrange(desc(n))

# adult_2eth_summary <- adult_2eth %>%
#   pivot_wider(names_from = eth_expand, values_from = n, values_fill = 0) %>%
#   dplyr::select(any_of(c('Not of Hispanic, Latino, or Spanish origin', 
#                            'Mexican, Mexican American, Chicano', 
#                            'Puerto Rican', 
#                            'Cuban', 
#                            'Another Hispanic, Latino, or Spanish origin', 
#                            'Prefer not to answer'))) %>%
#   group_by(across(any_of(c('Not of Hispanic, Latino, or Spanish origin', 
#                            'Mexican, Mexican American, Chicano', 
#                            'Puerto Rican', 
#                            'Cuban', 
#                            'Another Hispanic, Latino, or Spanish origin', 
#                            'Prefer not to answer')))) %>% count %>% arrange(desc(n)) 
```

```{r}
# create simplified table for combining with race data (eventually)
adult_eth <- person_id_multiple_23_eth %>% 
  dplyr::select(person_id, ethnicity_group, n)

## after making function ----
count_combination_eth <- function(data, group, n_ethnicities){
  temp <- data %>% 
    filter(n %in% n_ethnicities)
  
  pivot <- temp %>% 
    pivot_wider(names_from = group, values_from = n, values_fill = 0) %>%
  dplyr::select(any_of(c('ethnicity_1', 'ethnicity_2', 'ethnicity_3', 'ethnicity_4', 'ethnicity_997', 'ethnicity_999'))) %>%
  group_by(across(any_of(c('ethnicity_1', 'ethnicity_2', 'ethnicity_3', 'ethnicity_4', 'ethnicity_997', 'ethnicity_999')))) %>% 
    count %>% arrange(desc(n))
  
  output <- pivot %>% 
    mutate(total=sum(pivot$n)) %>% 
    mutate(prop=(round(n/total, digits = 3)))
}

adult_1eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 1) #5902 people
adult_2eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 2) #19 people 
adult_3eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 3) #2 people
adult_4eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 4) #0 people
adult_5eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 5) #0 people
adult_6eth_summary <- count_combination_eth(person_id_multiple_23_eth, 'ethnicity_group', 6) #0 people
```
```{r, include=FALSE}
# test
eth_3 <- person_id_multiple_23_eth %>% 
  filter(n==1,
         ethnicity_group=="ethnicity_3")

table(person_id_multiple_23_eth$n) #5902 with 1 ethnicity
filter <- person_id_multiple_23_eth %>% 
  filter(n==1) #5902
filter2 <- filter %>% 
  filter(ethnicity_group=="ethnicity_1") #4801 people reporting 1 ethnicity are not hispanic/latino/Spanish origin
```


## Race + ethnicity combinations
### For recoding exercise
```{r}
# 1. generating table for re-coding exercise 
nrow(adult_23) #5931

other_race <- adult_23 %>% 
  filter(race_other=="Selected") #133
other_race_specify <- adult_23 %>% 
  filter(!is.na(race_other_specify)) #133
other_eth_specify <- adult_23 %>% 
  filter(!is.na(ethnicity_other)) #132

other_race_eth <- adult_23 %>% 
  filter(!is.na(race_other_specify) |
           !is.na(ethnicity_other)) #226
length(unique(other_race_eth$person_id)) #226 - just to make sure no duplicates

# for writing a data.frame or list of data.frames to an xlsx file
library(openxlsx)
write.xlsx(other_race_eth, 'T:/2024July/Mary/HHTS/2023/adult_2023_race_eth_recode.xlsx')
```

### Understanding general distribution
```{r}
# create simplified table that 
race_temp <- adult_race %>% 
  dplyr::group_by(person_id) %>% 
  summarise(n_race=mean(n)) #5923 - making sure each row is a unique respondent
eth_temp <- adult_eth %>% 
  dplyr::group_by(person_id) %>% 
  summarise(n_eth=mean(n)) #5923 - making sure each row is a unique respondent

race_eth_temp <- race_temp %>% 
  right_join(eth_temp, by = "person_id") #5923 - making sure each row is a unique respondent

# checking to make sure that there are the correct numbers of respondents with 1,2,3 races/ethnicities
# table(race_eth_temp$n_race)

# join to original wide table with all race/ethnicity
adult_race_eth_count <- adult %>% 
  dplyr::filter(survey_year=="2023") %>% 
  dplyr::select_if(grepl("person_id", names(.)) | 
                     grepl("race_", names(.)) | 
                     grepl("ethnicity_", names(.))) %>% #5931
  right_join(race_eth_temp, by = "person_id")

# length(unique(adult_race_eth_count$person_id)) #5931 - making sure each row is a unique respondent

# detail_names <- c("Not of Hispanic, Latino, or Spanish origin"="ethnicity_1",
#                   "Mexican, Mexican American, Chicano"="ethnicity_2",
#                   "Puerto Rican"="ethnicity_3",
#                   "Cuban"="ethnicity_4",
#                   "Another ethnicity"="ethnicity_997",
#                   "Prefer not to answer"="ethnicity_999")
# rename(adult_race_eth_count, all_of(detail_names))

table(adult_race_eth_count$n_race, adult_race_eth_count$n_eth)
table1(~ factor(n_eth) | as.factor(n_race), data=adult_race_eth_count)
```
The table shows general trends and combinations
5,637/5,923 respondents : 1 race and 1 ethnicity (95.2%)
17/5,923 respondents : 1 race and 2 ethnicities (0.29%)
1/5,923 respondents : 1 race and 3 ethnicities

### Exploring different combinations
Based on the table, the vast majority of respondents chose 1 race and 1 ethnicity
```{r}
# BREAKDOWN
race_list <- c('race_afam', 'race_aiak', 'race_asian', 'race_hapi', 'race_noanswer', 'race_other')
ethnicity_list <- c('ethnicity_1', 'ethnicity_2', 'ethnicity_3', 'ethnicity_4', 'ethnicity_997', 'ethnicity_999')

## before making function (for checking) ----
# race_eth_1 <- adult_race_eth_count %>% 
#   dplyr::filter(n_race==1 & n_eth==1) %>% 
#   dplyr::select(any_of(ethnicity_list)) %>%
#   group_by(across(any_of(ethnicity_list))) %>% 
#     count %>% arrange(desc(n))

## after making function ----
race_eth_combination <- function(num_race, num_eth, category_list){
  output <- adult_race_eth_count %>% 
    dplyr::filter(n_race==num_race & n_eth==num_eth) %>% 
    dplyr::select(any_of(ethnicity_list)) %>%
    group_by(across(any_of(ethnicity_list))) %>% 
    count %>% arrange(desc(n))
  
  final <- output %>% 
    mutate(total=sum(output$n)) %>% 
    mutate(prop=(round(n/total, digits = 3)))
}

race_1_eth_1 <- race_eth_combination(1,1,ethnicity_list)
race_2_eth_1 <- race_eth_combination(2,1,ethnicity_list)
race_3_eth_1 <- race_eth_combination(3,1,ethnicity_list)
race_4_eth_1 <- race_eth_combination(4,1,ethnicity_list)
```
80.6% of respondents who chose 1 race, are not Hispanic/Latino/Spanish origin. 
```{r}
eth_1 <- person_id_multiple_23_eth %>% 
  filter(n==1,
         ethnicity_group=="ethnicity_1") #4801
length(unique(eth_1$person_id))
 

eth1_race1 <- count_combination_race(eth_1, 'ethnicity_group', 1) #4801
```

```{r, include=FALSE}
## CHECKING NUMBERS
check <- adult_23 %>%
  filter(ethnicity_1=="Selected",
         ethnicity_2=="Not selected",
         ethnicity_3=="Not selected",
         ethnicity_4=="Not selected",
         ethnicity_997=="Not selected",
         ethnicity_999=="Not selected") #4750 
length(unique(check$person_id))

check <- adult_23 %>%
  filter(ethnicity_1=="Selected",
         is.na(ethnicity_2),
         is.na(ethnicity_3),
         is.na(ethnicity_4),
         is.na(ethnicity_997),
         is.na(ethnicity_999)) #51 
length(unique(check$person_id))

# why are these numbers not lining up? something is wrong with the person_id_multiple_23_eth dataset?
check_join <- eth_1 %>% 
  anti_join(check, by="person_id") 

length(unique(check_join$person_id)) #51
missing_ids <- unique(check_join$person_id)

missing_people <- adult_23 %>% 
  filter(person_id %in% missing_ids)
# the missing 51 people - a recoding issue - NA vs Not Selected after 51 respondents were updated 
```










```{r, inlcude=FALSE, eval=FALSE}
variable_list<-add_variable(variable_list, 'mode_char1','trip')
group_labels<-get_grouped_labels(group_id='group_1', group_name='mode_char1')
value_labels<-add_values_code(group_name='mode_char1')
trip<-grp_to_tbl(tbl=trip, ungrouped_name='mode_characterization', grouped_name='mode_char1')%>%filter(mode_characterization!='Airplane')
```

```{r, inlcude=FALSE, eval=FALSE}
work_trip<- trip%>%filter(dest_purpose%in% c('Went to work-related place (e.g., meeting, second job, delivery','Went to other work-related activity','Went to work-related activity (e.g., meeting, delivery, worksite','Went to primary workplace'))
```

travelSurveyTools expects the data to be in a list of data.tables. You must also specify the names of the ids on each table, and the names of the weights.

```{r, inlcude=FALSE, eval=FALSE}
hts_data = list(hh=hh,
                person=person,
                day=day,
                trip = trip)
ids = c('hh_id', 'person_id','day_id', 'trip_id')
wts = c('hh_weight', 'person_weight', 'day_weight', 'trip_weight')
```

Now mode_simple is on the variables table, the values table, and the trip table. And we can run a summary.

```{r, inlcude=FALSE, eval=FALSE}

mode_summary = summarize_weighted(hts_data= hts_data,
                               summarize_var = 'mode_char1',
                               summarize_by = 'survey_year',
                               id_cols= ids,
                               wt_cols=wts,
                               wtname='trip_weight'
                               )
```

```{r, inlcude=FALSE, eval=FALSE}

common_modes<-mode_summary$summary$wtd%>%
  mutate(mode_char1= fct_reorder(mode_char1,-prop))%>%drop_na(mode_char1)%>%mutate(moe=prop_se*1.645)

static_column_chart(common_modes, x='mode_char1', y='prop', fill='survey_year',ylabel= 'Share', xlabel='Trip Mode', moe='moe')+ theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),legend.text = element_text(size=14), axis.title.y=element_text(size=20), axis.title.x=element_text(size=20))
write.csv(common_modes, 'mode_trend.csv')
```

```         
```

```{r, inlcude=FALSE, eval=FALSE}
work_data = list(hh=hh,
                person=person,
                day=day,
                trip = work_trip)

```

```{r, inlcude=FALSE, eval=FALSE}

mode_summary = summarize_weighted(hts_data=work_data,
                               summarize_var = 'mode_char1',
                               summarize_by = 'survey_year',
                               id_cols= ids,
                               wt_cols=wts,
                               wtname='trip_weight'
                               )
```

```{r, inlcude=FALSE, eval=FALSE}

common_modes<-mode_summary$summary$wtd%>%
  mutate(mode_char1= fct_reorder(mode_char1,-prop))%>%drop_na(mode_char1)%>%mutate(moe=prop_se*1.645)

static_column_chart(common_modes, x='mode_char1', y='prop', fill='survey_year',ylabel= 'Share', xlabel='Trip Mode', moe='moe')+ theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),legend.text = element_text(size=14), axis.title.y=element_text(size=20), axis.title.x=element_text(size=20))
write.csv(common_modes, 'work_mode_trend.csv')
```

{r}

common_modes\<-mode_summary$summary$wtd%\>% mutate(mode_char1= fct_reorder(mode_char1,-prop))%\>%drop_na(mode_char1)%\>%mutate(moe=prop_se\*1.645)

static_column_chart(common_modes, x='mode_char1', y='prop', fill='survey_year',ylabel= 'Share', xlabel='Trip Mode', moe='moe')+ theme(axis.text.x=element_text(size=14), axis.text.y=element_text(size=14),legend.text = element_text(size=14), axis.title.y=element_text(size=20), axis.title.x=element_text(size=20)) write.csv(common_modes, 'mode_trend.csv')
