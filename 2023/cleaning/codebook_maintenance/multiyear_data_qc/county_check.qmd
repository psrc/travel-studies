---
title: "county assignment"
date: today
---

- county variables:`dest_county`,`home_county`,`origin_county`,`prev_home_county`,`school_county`,`work_county`
- Fixing
  - need to reassign `work_county`
  - minor mistakes in `home_county`,`prev_home_county`,`school_county`
  - Question: is `"work_lng"`,`"work_lat"` in 2019 correct? too many work county errors

```{r}
# 2024/10/21 county check
library(psrc.travelsurvey)
library(tidyverse)
library(psrcelmer)
library(sf)
library(leaflet)
sf_use_s2(TRUE)

# list of table names and view names for each data table
table_names <- c('hh','person','day','trip','vehicle')
view_names <- c('v_households_labels','v_persons_labels','v_days_labels','v_trips_labels','v_vehicles_labels')
names(view_names) <- table_names

df_view_name <- data.frame(table = table_names,
                           Elmer.view.name = view_names,
                           row.names = NULL)

# RGC layer
region_county_plot <- st_read_elmergeo('county_background_evw')
region_county <- region_county_plot %>%
  # projection
  st_transform(2926) %>%
  select(county_nm,psrc)

# region_center_buffer <- st_buffer(region_center, dist = 300) %>%
#   rename(name_buffer = name)
# region_center_plot_buffer <- region_center_buffer %>%
#    st_transform(4326) 


# read HTS data
hh_data <- get_query(sql= paste0("select * from HHSurvey.", view_names['hh']))
person_data <- get_query(sql= paste0("select * from HHSurvey.", view_names['person']))
trip_data <- get_query(sql= paste0("select * from HHSurvey.", view_names['trip']))
```

```{r}

match_county_assign <- function(data,county_var,weight,point_lng,point_lat,vars_list){
  result <- data %>% 
    filter(.[[weight]]>0, !is.na(.[[point_lng]])) %>%
    select(all_of(vars_list)) %>%
    # create sf layer
    st_as_sf(coords = c(point_lng, point_lat), crs = 4326, remove=FALSE) %>%
    st_transform(2926) %>% 
    # spatial join RGC layer
    st_join(region_county, join = st_intersects) %>%
    mutate(county_check = case_when(.[[county_var]]==county_nm~"correct",
                                    is.na(.[[county_var]]) & is.na(county_nm)~"correct",
                                    TRUE~"wrong")) %>%
    arrange(desc(county_check))
  st_geometry(result) <- NULL
  
  # print(head(result))
  
  return(result)
}

# plot RGC assignment
plot_location <- function(county_lyr,county_name,lat,lng){
  leaflet(county_lyr%>%filter(county_nm==county_name)) %>%
    addPolygons(stroke = FALSE) %>%
    addTiles() %>%
    addMarkers(lng,lat)
}

# plot_location(region_county_plot,	"King",37.78260,-122.4620)

```

## household data

:::{.panel-tabset}
### `home_county`
```{r}

vars_list <- c("household_id","survey_year",
               "home_county","home_lat","home_lng","hh_weight")

hh_home_county <- match_county_assign(hh_data,"home_county","hh_weight","home_lng","home_lat",vars_list)
```

- a total of `{r} nrow(hh_home_county %>% filter(county_check=="wrong"))` mistakes in county assignment
- mistakes in county assignment distributed across survey years

```{r}
table(hh_home_county %>% filter(county_check=="wrong") %>% select(survey_year))
```

```{r}
hh_home_county %>% filter(county_check=="wrong")
```

- example mistake: `household_id = 191039563`
```{r}
plot_location(region_county_plot,	"King",37.78260,-122.4620)
```

### `prev_home_county`
```{r}

vars_list <- c("household_id","survey_year",
               "prev_home_county","prev_home_lat","prev_home_lng","hh_weight")

hh_prev_home_county <- match_county_assign(hh_data,"prev_home_county","hh_weight","prev_home_lng","prev_home_lat",vars_list)
```

- a total of `{r} nrow(hh_home_county %>% filter(county_check=="wrong"))` mistakes in county assignment
- mistakes in county assignment distributed across survey years

```{r}
table(hh_prev_home_county %>% filter(county_check=="wrong") %>% select(survey_year))
```

```{r}
hh_home_county %>% filter(county_check=="wrong")
```

- example mistake: `household_id = 23197085`
```{r}
plot_location(region_county_plot,	"King",47.69810,-122.32619)
```

:::

## person data

:::{.panel-tabset}
### `school_county`
```{r}

vars_list <- c("person_id","survey_year",
               "school_county","school_loc_lat","school_loc_lng","person_weight")
fix_county_name <- person_data %>%
  mutate(school_county = str_remove(school_county, " County"))

person_school_county <- match_county_assign(fix_county_name,"school_county","person_weight","school_loc_lng","school_loc_lat",vars_list)
```

- number of people with school outside of WA state: `{r} nrow(person_school_county %>% filter(is.na(county_nm)))`
- a total of `{r} nrow(person_school_county %>% filter(county_check=="wrong" & !is.na(county_nm)))` mistakes in county assignment
- mistakes in county assignment distributed across survey years

```{r}
table(person_school_county %>% filter(county_check=="wrong" & !is.na(county_nm)) %>% select(survey_year))
```

```{r}
person_school_county %>% filter(county_check=="wrong")
```

- example mistake: `person_id = 19100687701`
```{r}
plot_location(region_county_plot,	"King",47.60950,-122.28800)
```

### `work_county`
```{r}

vars_list <- c("person_id","survey_year",
               "work_county","work_lat","work_lng","person_weight")
fix_county_name <- person_data %>%
  mutate(work_county = str_remove(str_to_title(work_county), " County"))

person_work_county <- match_county_assign(fix_county_name,"work_county","person_weight","work_lng","work_lat",vars_list)
```

- number of people with work outside of WA state: `{r} nrow(person_work_county %>% filter(is.na(county_nm)))`
- a total of `{r} nrow(person_work_county %>% filter(county_check=="wrong" & !is.na(county_nm)))` mistakes in county assignment
- mistakes in county assignment distributed across survey years

```{r}
table(person_work_county %>% filter(county_check=="wrong" & !is.na(county_nm)) %>% select(survey_year))
```

```{r}
head(person_work_county %>% filter(county_check=="wrong" & !is.na(county_nm)))
```

- example mistake: `person_id = 2121948002`
```{r}
plot_location(region_county_plot,	"Snohomish",47.79860,	-122.2150)
```
:::

## trip data

:::{.panel-tabset}

### `dest_county`
```{r}

vars_list <- c("trip_id","survey_year",
               "dest_county","dest_lat","dest_lng","trip_weight")
fix_county_name <- trip_data %>%
  mutate(dest_county = str_remove(str_to_title(dest_county), " County"))

trip_dest_county <- match_county_assign(fix_county_name,"dest_county","trip_weight","dest_lng","dest_lat",vars_list)

result <- trip_dest_county %>%
  mutate(final_county = case_when(county_nm %in% c("King", "Kitsap", "Snohomish", "Pierce")~county_nm,
                                  !is.na(county_nm)~"WA state",
                                  is.na(county_nm) & !is.na(dest_county)~paste("outside WA state:",dest_county),
                                  is.na(county_nm)~"outside WA state",
                                  TRUE~"I don't know")) %>%
  group_by(final_county,survey_year,county_check) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  pivot_wider(id_cols=c("survey_year","county_check"),names_from = "final_county", values_from="count")
```

- no mistakes for trips in PSRC 4-county region

```{r}
result
```

### `origin_county`
```{r}

vars_list <- c("trip_id","survey_year",
               "origin_county","origin_lat","origin_lng","trip_weight")
fix_county_name <- trip_data %>%
  mutate(origin_county = str_remove(str_to_title(origin_county), " County"))

trip_origin_county <- match_county_assign(fix_county_name,"origin_county","trip_weight","origin_lng","origin_lat",vars_list)

result <- trip_origin_county %>%
  mutate(final_county = case_when(county_nm %in% c("King", "Kitsap", "Snohomish", "Pierce")~county_nm,
                                  !is.na(county_nm)~"WA state",
                                  is.na(county_nm) & !is.na(origin_county)~paste("outside WA state:",origin_county),
                                  is.na(county_nm)~"outside WA state",
                                  TRUE~"I don't know")) %>%
  group_by(final_county,survey_year,county_check) %>%
  summarise(count = n()) %>%
  ungroup() %>%
  pivot_wider(id_cols=c("survey_year","county_check"),names_from = "final_county", values_from="count")
```

- no mistakes for trips in PSRC 4-county region

```{r}
result
```

:::

